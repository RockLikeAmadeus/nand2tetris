// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:

    // If the first bit of the 15 bit address is 0, route to data memory
    // If the first bit of the 15 bit address is 1, route to screen or kbd
    // Route to kbd only for address 110000000000000
    // However, Keyboard chip has no inputs

    // Set load on data RAM to 1 only if load is 1 AND address[14] is 0
    RAM16K(in=in, load=loadDataMemory, address=address[0..13], out=dataOut); // 14 bit address in
    Not(in=address[14], out=notAdd14);
    And(a=load, b=notAdd14, out=loadDataMemory);

    // Set load on screen memory to 1 only if load is 1 AND address[14] is 1 AND address[13] is 0
    Screen(in=in, load=loadScreenMemory, address=address[0..12], out=screenOut); // 13 bit address in
    Not(in=address[13], out=notAdd13);
    And(a=load, b=address[14], out=tmp);
    And(a=tmp, b=notAdd13, out=loadScreenMemory);

    Keyboard(out=keyboardOut);


    // Output
    // If the first bit of the 15 bit address is 0 (address[14]), output data memory
    // If address[14] is 1 AND address[13] is 0, output screen memory
    // If address[14] is 1 AND address[13] is 1 AND address[0..12] is 0, output keyboard memory
    // If address[14] is 1 AND address[13] is 1 AND (Or(address[0..12] is 1)) output false

    Mux16(a=dataOut, b=screenOrKbdOrFalse, sel=address[14], out=out);
    Mux16(a=screenOut, b=kbdOrFalse, sel=address[13], out=screenOrKbdOrFalse);
    Mux16(a=keyboardOut, b=false, sel=notAllZeros, out=kbdOrFalse);

    Or8Way(in=address[0..7], out=firstHalf);
    Or8Way(in[0..4]=address[8..12], out=secondHalf);
    Or(a=firstHalf, b=secondHalf, out=notAllZeros);
}